import cv2
import numpy as np

INT_MIN=0
SinTable=[0.0000000, 0.0174524, 0.0348995, 0.0523360, 0.0697565, 0.0871557,
    0.1045285, 0.1218693, 0.1391731, 0.1564345, 0.1736482, 0.1908090,
    0.2079117, 0.2249511, 0.2419219, 0.2588190, 0.2756374, 0.2923717,
    0.3090170, 0.3255682, 0.3420201, 0.3583679, 0.3746066, 0.3907311,
    0.4067366, 0.4226183, 0.4383711, 0.4539905, 0.4694716, 0.4848096,
    0.5000000, 0.5150381, 0.5299193, 0.5446390, 0.5591929, 0.5735764,
    0.5877853, 0.6018150, 0.6156615, 0.6293204, 0.6427876, 0.6560590,
    0.6691306, 0.6819984, 0.6946584, 0.7071068, 0.7193398, 0.7313537,
    0.7431448, 0.7547096, 0.7660444, 0.7771460, 0.7880108, 0.7986355,
    0.8090170, 0.8191520, 0.8290376, 0.8386706, 0.8480481, 0.8571673,
    0.8660254, 0.8746197, 0.8829476, 0.8910065, 0.8987940, 0.9063078,
    0.9135455, 0.9205049, 0.9271839, 0.9335804, 0.9396926, 0.9455186,
    0.9510565, 0.9563048, 0.9612617, 0.9659258, 0.9702957, 0.9743701,
    0.9781476, 0.9816272, 0.9848078, 0.9876883, 0.9902681, 0.9925462,
    0.9945219, 0.9961947, 0.9975641, 0.9986295, 0.9993908, 0.9998477,
    1.0000000, 0.9998477, 0.9993908, 0.9986295, 0.9975641, 0.9961947,
    0.9945219, 0.9925462, 0.9902681, 0.9876883, 0.9848078, 0.9816272,
    0.9781476, 0.9743701, 0.9702957, 0.9659258, 0.9612617, 0.9563048,
    0.9510565, 0.9455186, 0.9396926, 0.9335804, 0.9271839, 0.9205049,
    0.9135455, 0.9063078, 0.8987940, 0.8910065, 0.8829476, 0.8746197,
    0.8660254, 0.8571673, 0.8480481, 0.8386706, 0.8290376, 0.8191520,
    0.8090170, 0.7986355, 0.7880108, 0.7771460, 0.7660444, 0.7547096,
    0.7431448, 0.7313537, 0.7193398, 0.7071068, 0.6946584, 0.6819984,
    0.6691306, 0.6560590, 0.6427876, 0.6293204, 0.6156615, 0.6018150,
    0.5877853, 0.5735764, 0.5591929, 0.5446390, 0.5299193, 0.5150381,
    0.5000000, 0.4848096, 0.4694716, 0.4539905, 0.4383711, 0.4226183,
    0.4067366, 0.3907311, 0.3746066, 0.3583679, 0.3420201, 0.3255682,
    0.3090170, 0.2923717, 0.2756374, 0.2588190, 0.2419219, 0.2249511,
    0.2079117, 0.1908090, 0.1736482, 0.1564345, 0.1391731, 0.1218693,
    0.1045285, 0.0871557, 0.0697565, 0.0523360, 0.0348995, 0.0174524,
    0.0000000, -0.0174524, -0.0348995, -0.0523360, -0.0697565, -0.0871557,
    -0.1045285, -0.1218693, -0.1391731, -0.1564345, -0.1736482, -0.1908090,
    -0.2079117, -0.2249511, -0.2419219, -0.2588190, -0.2756374, -0.2923717,
    -0.3090170, -0.3255682, -0.3420201, -0.3583679, -0.3746066, -0.3907311,
    -0.4067366, -0.4226183, -0.4383711, -0.4539905, -0.4694716, -0.4848096,
    -0.5000000, -0.5150381, -0.5299193, -0.5446390, -0.5591929, -0.5735764,
    -0.5877853, -0.6018150, -0.6156615, -0.6293204, -0.6427876, -0.6560590,
    -0.6691306, -0.6819984, -0.6946584, -0.7071068, -0.7193398, -0.7313537,
    -0.7431448, -0.7547096, -0.7660444, -0.7771460, -0.7880108, -0.7986355,
    -0.8090170, -0.8191520, -0.8290376, -0.8386706, -0.8480481, -0.8571673,
    -0.8660254, -0.8746197, -0.8829476, -0.8910065, -0.8987940, -0.9063078,
    -0.9135455, -0.9205049, -0.9271839, -0.9335804, -0.9396926, -0.9455186,
    -0.9510565, -0.9563048, -0.9612617, -0.9659258, -0.9702957, -0.9743701,
    -0.9781476, -0.9816272, -0.9848078, -0.9876883, -0.9902681, -0.9925462,
    -0.9945219, -0.9961947, -0.9975641, -0.9986295, -0.9993908, -0.9998477,
    -1.0000000, -0.9998477, -0.9993908, -0.9986295, -0.9975641, -0.9961947,
    -0.9945219, -0.9925462, -0.9902681, -0.9876883, -0.9848078, -0.9816272,
    -0.9781476, -0.9743701, -0.9702957, -0.9659258, -0.9612617, -0.9563048,
    -0.9510565, -0.9455186, -0.9396926, -0.9335804, -0.9271839, -0.9205049,
    -0.9135455, -0.9063078, -0.8987940, -0.8910065, -0.8829476, -0.8746197,
    -0.8660254, -0.8571673, -0.8480481, -0.8386706, -0.8290376, -0.8191520,
    -0.8090170, -0.7986355, -0.7880108, -0.7771460, -0.7660444, -0.7547096,
    -0.7431448, -0.7313537, -0.7193398, -0.7071068, -0.6946584, -0.6819984,
    -0.6691306, -0.6560590, -0.6427876, -0.6293204, -0.6156615, -0.6018150,
    -0.5877853, -0.5735764, -0.5591929, -0.5446390, -0.5299193, -0.5150381,
    -0.5000000, -0.4848096, -0.4694716, -0.4539905, -0.4383711, -0.4226183,
    -0.4067366, -0.3907311, -0.3746066, -0.3583679, -0.3420201, -0.3255682,
    -0.3090170, -0.2923717, -0.2756374, -0.2588190, -0.2419219, -0.2249511,
    -0.2079117, -0.1908090, -0.1736482, -0.1564345, -0.1391731, -0.1218693,
    -0.1045285, -0.0871557, -0.0697565, -0.0523360, -0.0348995, -0.0174524,
    -0.0000000, 0.0174524, 0.0348995, 0.0523360, 0.0697565, 0.0871557,
    0.1045285, 0.1218693, 0.1391731, 0.1564345, 0.1736482, 0.1908090,
    0.2079117, 0.2249511, 0.2419219, 0.2588190, 0.2756374, 0.2923717,
    0.3090170, 0.3255682, 0.3420201, 0.3583679, 0.3746066, 0.3907311,
    0.4067366, 0.4226183, 0.4383711, 0.4539905, 0.4694716, 0.4848096,
    0.5000000, 0.5150381, 0.5299193, 0.5446390, 0.5591929, 0.5735764,
    0.5877853, 0.6018150, 0.6156615, 0.6293204, 0.6427876, 0.6560590,
    0.6691306, 0.6819984, 0.6946584, 0.7071068, 0.7193398, 0.7313537,
    0.7431448, 0.7547096, 0.7660444, 0.7771460, 0.7880108, 0.7986355,
    0.8090170, 0.8191520, 0.8290376, 0.8386706, 0.8480481, 0.8571673,
    0.8660254, 0.8746197, 0.8829476, 0.8910065, 0.8987940, 0.9063078,
    0.9135455, 0.9205049, 0.9271839, 0.9335804, 0.9396926, 0.9455186,
    0.9510565, 0.9563048, 0.9612617, 0.9659258, 0.9702957, 0.9743701,
    0.9781476, 0.9816272, 0.9848078, 0.9876883, 0.9902681, 0.9925462,
    0.9945219, 0.9961947, 0.9975641, 0.9986295, 0.9993908, 0.9998477,
    1.0000000]

def sincos(angle):
    if angle<0:
        angle=angle+360
    sinval=SinTable[angle]
    cosval=SinTable[450-angle]
    return sinval,cosval
    
    
def ellipsePoly_my(center,axes,angle,arc_start,arc_end,delta):
    #axes.width
    size_a=axes[0]
    #axes.height
    size_b=axes[1]
    #center.x
    cx=center[0]
    #center.y
    cy=center[1]
    prevPt=[INT_MIN,INT_MIN]
    
    while angle<0:
        angle=angle+360
    while angle>360:
        angle=angle-360
    
    if arc_start>arc_end:
        i=arc_start
        arc_start=arc_end
        arc_end=i
        
    while arc_start<0:
        arc_start=arc_start+360
        arc_end=arc_end+360
        
    while arc_end>360:
        arc_end=arc_end-360
        arc_start=arc_start-360
        
    if (arc_end-arc_start)>360:
        arc_start=0
        arc_end=360
        
    alpha,beta=sincos(angle)
    
    pts=[]
    end=arc_end+delta
    #for i in range(start,end,step)
    for i in range(arc_start,end,delta):
        angle=i
        if angle>arc_end:
            angle=arc_end
        if angle<0:
            angle=angle+360
        
        x=size_a*SinTable[450-angle]
        y=size_b*SinTable[angle]
        pt=[]
        #pt.x
        pt.append(round(cx+x*alpha-y*beta))
        pt.append(round(cy+x*beta+y*alpha))
        if pt!=prevPt:
            pts.append(pt)
            prevPt=pt
    
    if len(pts)==1:
        pts.append(pts[0])
        
    return pts
        
def EllipseEx_my(center,axes,angle,arc_start,arc_end):
    #Size:(axes.width,axes.height)
    axes[0]=abs(axes[0])
    axes[1]=abs(axes[1])
    delta=1
    pts=ellipsePoly_my(center,axes,angle,arc_start,arc_end,delta)
    
    return pts
 
#box[x,y,width,height]
def ellipse_my(box,angle):
    assert box[2]>=0 and box[3]>=0
    _angle=round(angle)
    center=[box[0],box[1]]
    axes=[box[2],box[3]]
    v=EllipseEx_my(center,axes,_angle,0,360)
    
    return v
   